swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "0.0.1"
  title: "Swagger Blog"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/v1"
schemes:
  - "https"
  - "http"
paths:
  /posts:
    post:
      tags:
        - "post"
      summary: "Add a new post"
      description: ""
      operationId: "addPost"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Post object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/definitions/Post"
      responses:
        200:
          description: "sucess"
        405:
          description: "Invalid input"

  /posts/{postId}:
    get:
      tags:
        - "post"
      summary: "Find post by ID"
      description: "Returns a single post"
      operationId: "getPostById"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/post"
        400:
          description: "Invalid ID supplied"
        404:
          description: "post not found"
      security:
        - api_key: []
    put:
      tags:
        - "post"
      summary: "Updates a post in the store with form data"
      description: ""
      operationId: "updatePostWithForm"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "title"
          in: "application/json"
          description: "Updated name of the post"
          required: false
          type: "string"
        - name: "text"
          in: "application/json"
          description: "Updated text of the post"
          required: false
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - post_auth:
            - "write:posts"
            - "read:posts"
    delete:
      tags:
        - "post"
      summary: "Deletes a post"
      description: ""
      operationId: "deletePost"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "api_key"
          in: "header"
          required: false
          type: "string"
        - name: "postId"
          in: "path"
          description: "Post id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Post not found"

  /posts/{postId}/comments:
    get:
      tags:
        - "comments"
      summary: "Find all comments by postID"
      description: "Returns an array of posts"
      operationId: "getCommentsByPostId"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post to return comments"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/comments"
        400:
          description: "Invalid ID supplied"
        404:
          description: "post not found"
      security:
        - api_key: []
  /posts/{postId}/comments/{commentId}:
    put:
      tags:
        - "comment"
      summary: "Updates a comment in the store with  data"
      description: ""
      operationId: "updateComment"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "postId"
          in: "path"
          description: "ID of post that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "commentId"
          in: "path"
          description: "Updated commentID of the post"
          required: true
          type: "integer"
          format: "int64"
        - name: "text"
          in: "application/json"
          description: "Updated text of the comment"
          required: false
          type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
        - post_auth:
            - "write:comments"
            - "read:comments"
    delete:
      tags:
        - "comment"
      summary: "Deletes a comment"
      description: ""
      operationId: "deleteComment"
      produces:
        - "application/json"
      parameters:
        - name: "commentId"
          in: "path"
          description: "comment id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Post not found"

  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
        - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "name that need to be updated"
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Updated user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "username"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
